// 프로그래머스 콜라츠추측
// 난이도 :  level 1
// 풀이시간 : 10분
// 메모리 :	  KB      
// 시간 :   ms      

/*
문제
1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될 때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다. 작업은 다음과 같습니다.

1-1. 입력된 수가 짝수라면 2로 나눕니다. 
1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다. 
2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다. 
예를 들어, 주어진 수가 6이라면 6 → 3 → 10 → 5 → 16 → 8 → 4 → 2 → 1 이 되어 총 8번 만에 1이 됩니다. 위 작업을 몇 번이나 반복해야 하는지 반환하는 함수, solution을 완성해 주세요. 단, 주어진 수가 1인 경우에는 0을, 작업을 500번 반복할 때까지 1이 되지 않는다면 –1을 반환해 주세요.

제한 사항
입력된 수, num은 1 이상 8,000,000 미만인 정수입니다.
입출력 예
n	result
6	8
16	4
626331	-1
입출력 예 설명
입출력 예 #1
문제의 설명과 같습니다.

입출력 예 #2
16 → 8 → 4 → 2 → 1 이 되어 총 4번 만에 1이 됩니다.

입출력 예 #3
626331은 500번을 시도해도 1이 되지 못하므로 -1을 리턴해야 합니다.


*/
    // 1. 500번을 시도해보 1이 되지 못하면 -1을 반환하므로 for문으로 500까지만 돌리고 최종 return을 -1로 둔다
    // 2. for문 안에서 삼항연산자로 num이 짝수일때는 2를 나누고 아닌 경우에는 곱하기 3 더하기 1을 한다.
    // 3. 삼항연산자 위에 if문을 재귀함수에서 제어문 사용하듯 조건을 걸어준다. i가 1이 되었을 때 i를 return 한다.

function solution(num) { 
    for(let i = 0; i < 500; i++) {
        if(num === 1) {
            return i;
        }
        num % 2 === 0 ? num = num / 2 : num = num * 3 + 1;
        
    }
    return -1;
}
/*
테스트 1 〉	통과 (0.08ms, 30.1MB)
테스트 2 〉	통과 (0.10ms, 30.1MB)
테스트 3 〉	통과 (0.05ms, 30MB)
테스트 4 〉	통과 (0.04ms, 30MB)
테스트 5 〉	통과 (0.08ms, 30.1MB)
테스트 6 〉	통과 (0.06ms, 30MB)
테스트 7 〉	통과 (0.11ms, 29.9MB)
테스트 8 〉	통과 (0.04ms, 29.9MB)
테스트 9 〉	통과 (0.05ms, 30.2MB)
테스트 10 〉	통과 (0.07ms, 30MB)
테스트 11 〉	통과 (0.10ms, 30.1MB)
테스트 12 〉	통과 (0.09ms, 29.9MB)
테스트 13 〉	통과 (0.04ms, 30MB)
테스트 14 〉	통과 (0.04ms, 30MB)
테스트 15 〉	통과 (0.05ms, 30.3MB)
테스트 16 〉	통과 (0.04ms, 30MB)
*/