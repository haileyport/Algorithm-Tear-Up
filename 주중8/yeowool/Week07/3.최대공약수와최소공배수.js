// 프로그래머스 최대공약수와 최소공배수
// 난이도 :  level 1
// 풀이시간 :  20분
// 메모리 :	  KB      
// 시간 :   ms      

/*
문제
두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수, solution을 완성해 보세요. 배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다. 예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.

제한 사항
두 수는 1이상 1000000이하의 자연수입니다.
입출력 예
n	m	return
3	12	[3, 12]
2	5	[1, 10]
입출력 예 설명
입출력 예 #1
위의 설명과 같습니다.

입출력 예 #2
자연수 2와 5의 최대공약수는 1, 최소공배수는 10이므로 [1, 10]을 리턴해야 합니다.
*/

/*
1. 먼저 배열형태로 최대공약수 gcd와 최소공배수 lcm를 선언한다.
2. for문으로 최대공약수를 구할 때 n과 m중 2부터 작은 숫자만큼만 순회하도록 한다.
3. if문으로 i로 n과 m을 나누어 떨어지는 조건을 적어 두 조건 모두 해당되는 경우를 gcd에 할당한다.
4. 이제 최소공배수 구하기 시작
5. while문 안에서 if문으로 n과 m이 i로 나누어 떨어지는 경우를 and로 만들어준다.
6. 조건이 통과하지 못하면 lcm을 1씩 더한다.
7. while문이 참일경우 더이상 더하지 않고 최종적으로 더해진 lcm을 출력한다.
8. 처음에 선언했던 배열을 그대로 return한다.
*/

function solution(n, m) {
    let [gcd, lcm] = [1, 1]
    for (let i = 2; i <= Math.min(n,m); i++) {
        if(n % i == 0 && m % i == 0) {
            gcd = i;
        }
    }
    while(true) {
        if(lcm % n == 0 && lcm % m == 0) {
            break;
        }
        lcm++;
    }
    return [gcd, lcm];
}

/*
테스트 1 〉	통과 (0.08ms, 30.1MB)
테스트 2 〉	통과 (0.12ms, 30MB)
테스트 3 〉	통과 (0.08ms, 30.1MB)
테스트 4 〉	통과 (0.11ms, 30MB)
테스트 5 〉	통과 (0.08ms, 30.1MB)
테스트 6 〉	통과 (0.07ms, 30.1MB)
테스트 7 〉	통과 (0.07ms, 29.8MB)
테스트 8 〉	통과 (0.07ms, 30MB)
테스트 9 〉	통과 (0.08ms, 30MB)
테스트 10 〉	통과 (0.07ms, 29.9MB)
테스트 11 〉	통과 (2.96ms, 32.4MB)
테스트 12 〉	통과 (5.26ms, 32.5MB)
테스트 13 〉	통과 (3.70ms, 32.5MB)
테스트 14 〉	통과 (5.43ms, 32.6MB)
테스트 15 〉	통과 (0.30ms, 29.8MB)
테스트 16 〉	통과 (4.72ms, 32.6MB)
*/