/**
 * 통과 여부 : 통과
 * 시간 : 1시간
 * 점수 : +8
 * 
 * 틀렸던 이유 : 실패율 구하고 정렬 고민하다가
 * 
 */

/**
 * @todo 도달했으나 클리어 x 플레이어의 수 / 스테이지에 도달한 플레이어 수
 * 뭐라는거임 !!!
 * @param {*} N 전체 스테이지 개수
 * @param {*} stages 게임을 이용하는 사용자가 현재 멈춰있는 스테이지 번호가 담긴 배열
 * @returns 실패율이 높은 스테이지부터 내림차순으로
 */
function solution(N, stages) {
  let user = stages.length;
  let arr = stages.slice();
  let answer = [];

  arr.sort((a, b) => a - b);

  for (let i = 0; i < N; i++) {
    let stageLength = arr.filter((el) => el === i + 1).length;
    answer.push([i + 1, stageLength / user]);
    user -= stageLength;
  }
  // return에 연산 안하는 게 좋다고 해서
  return answer.sort((a, b) => b[1] - a[1]).map((el) => el[0]);

}

let N = 5;
let stages = [2, 1, 2, 6, 2, 4, 3, 3];

let output = solution(N, stages);
console.log(output);

/**
 * 1. 정렬한다
 * 2. stage 같은 애들을 합친다 - filter length? 나이스
 * 3. user로 나누고 뺀다
 * 4. 이걸 어떻게 인덱스 순으로 정렬하지? 객체로 하고 값 순으로 정렬
 *
 */

/*
어.. 효율성 엄청 큰데..?
테스트 1 〉	통과 (0.29ms, 33.4MB)
테스트 2 〉	통과 (0.68ms, 33.5MB)
테스트 3 〉	통과 (150.46ms, 36.2MB)
테스트 4 〉	통과 (621.32ms, 42.1MB)
테스트 5 〉	통과 (1917.30ms, 48.6MB)
테스트 6 〉	통과 (2.60ms, 35.3MB)
테스트 7 〉	통과 (52.11ms, 35.8MB)
테스트 8 〉	통과 (541.77ms, 41.1MB)
테스트 9 〉	통과 (1917.28ms, 48.6MB)
테스트 10 〉	통과 (219.65ms, 40.7MB)
테스트 11 〉	통과 (440.73ms, 40.9MB)
테스트 12 〉	통과 (362.88ms, 43MB)
테스트 13 〉	통과 (591.19ms, 43.6MB)
테스트 14 〉	통과 (0.44ms, 33.5MB)
테스트 15 〉	통과 (29.15ms, 37.7MB)
테스트 16 〉	통과 (22.65ms, 38.2MB)
테스트 17 〉	통과 (41.58ms, 38.2MB)
테스트 18 〉	통과 (13.08ms, 38.2MB)
테스트 19 〉	통과 (5.97ms, 35.7MB)
테스트 20 〉	통과 (25.54ms, 39.9MB)
테스트 21 〉	통과 (51.10ms, 40.9MB)
테스트 22 〉	통과 (1740.15ms, 45.1MB)
테스트 23 〉	통과 (50.12ms, 45.7MB)
테스트 24 〉	통과 (154.28ms, 46.8MB)
테스트 25 〉	통과 (0.10ms, 33.5MB)
테스트 26 〉	통과 (0.11ms, 33.4MB)
테스트 27 〉	통과 (0.09ms, 33.5MB)

/------ return에 바로 연산 넣은 ..인데 얘가 더 빠르네 왜지
테스트 1 〉	통과 (0.28ms, 33.4MB)
테스트 2 〉	통과 (0.70ms, 33.6MB)
테스트 3 〉	통과 (114.55ms, 36.3MB)
테스트 4 〉	통과 (524.83ms, 41.1MB)
테스트 5 〉	통과 (1464.32ms, 48.5MB)
테스트 6 〉	통과 (2.45ms, 35.3MB)
테스트 7 〉	통과 (17.14ms, 36.1MB)
테스트 8 〉	통과 (432.85ms, 41MB)
테스트 9 〉	통과 (1422.01ms, 48.5MB)
테스트 10 〉	통과 (161.13ms, 40.7MB)
테스트 11 〉	통과 (425.81ms, 40.8MB)
테스트 12 〉	통과 (325.78ms, 42.9MB)
테스트 13 〉	통과 (699.22ms, 43.6MB)
테스트 14 〉	통과 (0.28ms, 33.4MB)
테스트 15 〉	통과 (40.53ms, 37.7MB)
테스트 16 〉	통과 (20.67ms, 38.2MB)
테스트 17 〉	통과 (37.64ms, 38.8MB)
테스트 18 〉	통과 (25.44ms, 38.2MB)
테스트 19 〉	통과 (3.46ms, 35.7MB)
테스트 20 〉	통과 (31.11ms, 39.8MB)
테스트 21 〉	통과 (46.86ms, 40.8MB)
테스트 22 〉	통과 (1833.10ms, 45.4MB)
테스트 23 〉	통과 (66.62ms, 45.6MB)
테스트 24 〉	통과 (138.48ms, 46.8MB)
테스트 25 〉	통과 (0.16ms, 33.4MB)
테스트 26 〉	통과 (0.13ms, 33.4MB)
테스트 27 〉	통과 (0.13ms, 33.3MB)
 */